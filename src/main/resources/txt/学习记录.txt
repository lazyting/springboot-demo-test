AOP:一种思想
这里介绍下maven中scope依赖范围的概念，因为后续涉及到这个会有问题。

依赖范围就是用来控制依赖和三种classpath(编译classpath，测试classpath、运行classpath)的关系，Maven有如下几种依赖范围：

compile:编译依赖范围。如果没有指定，就会默认使用该依赖范围。
    使用此依赖范围的Maven依赖，对于编译、测试、运行三种classpath都有效。
    典型的例子是spring-code,在编译、测试和运行的时候都需要使用该依赖。
test: 测试依赖范围。使用次依赖范围的Maven依赖，只对于测试classpath有效，
    在编译主代码或者运行项目的使用时将无法使用此依赖。典型的例子是Jnuit,它只有在编译测试代码及运行测试的时候才需要。
provided:已提供依赖范围。使用此依赖范围的Maven依赖，对于编译和测试classpath有效，
    但在运行时候无效。典型的例子是servlet-api,编译和测试项目的时候需要该依赖，但在运行项目的时候，
    由于容器以及提供，就不需要Maven重复地引入一遍。

使用aop步骤：
    1,添加依赖：spring-boot-starter-aop
    //2，往常的做法是在启动类上加注解，aop不需要
    3，建立处理文件

异常处理：
    1，没有按照预想的流程进行
    2，统一异常处理

常用注解：
这个实体类在属性上加入了注解@NotEmpty，@Length，那么常用的注解有：

约束注解名称      约束注解说明
@null           验证对象是否为空
@notnull        验证对象是否为非空
@asserttrue     验证 boolean 对象是否为 true
@assertfalse    验证 boolean 对象是否为 false
@min            验证 number 和 string 对象是否大等于指定的值
@max            验证 number 和 string 对象是否小等于指定的值
@decimalmin     验证 number 和 string 对象是否大等于指定的值，小数存在精度
@decimalmax     验证 number 和 string 对象是否小等于指定的值，小数存在精度
@size           验证对象（array,collection,map,string）长度是否在给定的范围之内
@digits         验证 number 和 string 的构成是否合法
@past           验证 date 和 calendar 对象是否在当前时间之前
@future         验证 date 和 calendar 对象是否在当前时间之后
@pattern        验证 string 对象是否符合正则表达式的规则
@Email          验证邮箱

实际例子：
@size (min=3, max=20, message="用户名长度只能在3-20之间")
@size (min=6, max=20, message="密码长度只能在6-20之间")
@pattern (regexp="[a-za-z0-9._%+-]+@[a-za-z0-9.-]+\\.[a-za-z]{2,4}", message="邮件格式错误")
@Length(min = 5, max = 20, message = "用户名长度必须位于5到20之间")
@Email(message = "比如输入正确的邮箱")
@NotNull(message = "用户名称不能为空")
@Max(value = 100, message = "年龄不能大于100岁")
@Min(value= 18 ,message= "必须年满18岁！" )
@AssertTrue(message = "bln4 must is true")
@AssertFalse(message = "blnf must is falase")
@DecimalMax(value="100",message="decim最大值是100")
DecimalMin(value="100",message="decim最小值是100")
@NotNull(message = "身份证不能为空")
@Pattern(regexp="^(\\d{18,18}|\\d{15,15}|(\\d{17,17}[x|X]))$", message="身份证格式错误")